### Reference Solution ###

% assign values for x and y:
x = 10;
y = 9;

% write your logical expression here:
logexp = xor(x > 5, y < 10);


### Hidden Tests ###

%%
run('solution')

% check for variable existence
vars = whos;
is_x = any(strcmp('x', {vars.name}));
assert(is_x, 'Make sure you define a variable with the name "x"')
is_y = any(strcmp('y', {vars.name}));
assert(is_y, 'Make sure you define a variable with the name "y"')
is_logexp = any(strcmp('logexp', {vars.name}));
assert(is_logexp, 'Make sure you assign your result to the variable "logexp"')

% check for the xor function
code = fileread('solution.m');
is_xor = strfind(code, 'xor(');
if length(is_xor) == 1
    suggestion = '';
else
    suggestion = 'Have you considered the xor() function?';
end

% check that their logical expression is correct
logexp_correct = xor(x > 5, y < 10);
assert(logexp == logexp_correct, ['Check that your logical comparisons are correct. ', suggestion])

% regex check for both variables in condition
expr = '[^\n]*logexp[^\n]*';
result_line = regexp(code,expr,'match');

range_x = strfind(result_line{1}, 'x');
range_y = strfind(result_line{1}, 'y');

assert(numel(range_x) >= 1, 'Your result did not include x in the range.');
assert(numel(range_y) >= 1, 'Your result did not include y in the range.');

% check for assignment suppression
num_suppressions = 3;
scolons = strfind(code, ';');
assert(numel(scolons) >= num_suppressions, 'Make sure to suppress your variable assignments. For example: r = 4;')