### Reference Solution ###

% Write your expressions here:
sqrt_19 = sqrt(19);
exp_3 = 3 ^ 1.2;
tan_pi = tan(pi);


## Hidden Tests ###

%%
run('solution')

% check for variable existence
vars = whos;
is_sqrt_19 = any(strcmp('sqrt_19', {vars.name}));
is_exp_3 = any(strcmp('exp_3', {vars.name}));
is_tan_pi = any(strcmp('tan_pi', {vars.name}));
assert(is_sqrt_19, 'Make sure you define a variable with the name "sqrt_19"')
assert(is_exp_3, 'Make sure you define a variable with the name "exp_3"')
assert(is_tan_pi, 'Make sure you define a variable with the name "tan_pi"')

% check for the correct result
sqrt_19_correct = sqrt(19);
exp_3_correct = 3 ^ 1.2;
tan_pi_correct = tan(pi);

assert(sqrt_19_correct == sqrt_19, 'Check your expression for the square root of 19. Make sure to use the built-in sqrt() function.')
assert(exp_3_correct == exp_3, 'Check your expression for the exponent of 3. Make sure to use the "^" operator for exponents.')
assert(tan_pi_correct == tan_pi, 'Check your expression for the tangent of pi. Make sure to use the built-in constant "pi".')

% check for assignment suppression
num_suppressions = 3;
code = fileread('solution.m');
scolons = strfind(code, ';');
assert(numel(scolons) >= num_suppressions, 'Make sure to suppress your variable assignments. For example: r = 4;')

% check for function usage
is_sqrt = strfind(code, 'sqrt(19)');
is_pi = strfind(code, 'tan(pi)');
assert(numel(is_sqrt) >= 1, 'Make sure to try and use built in MATLAB functions for this computation. Hint: sqrt()');
assert(numel(is_pi) >= 1, 'Make sure to try and use built in MATLAB functions for this computation.');